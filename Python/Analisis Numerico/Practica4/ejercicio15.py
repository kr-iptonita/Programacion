# -*- coding: utf-8 -*-
"""Ejercicio15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12uk1pUR9vstShWR1urvnEUyxQMT_I4G1

# **Ejercicio 15**

###Trabajo realizado por los alumnos:
#####    Juárez Torres Carlos Alberto ------------ 318013712
#####    Kano Chavira Nicolás -------------------- 315319204
#####    Méndez Saucedo Abigail ------------------ 421098260
#####    Partida Contreras Marían de los Ángeles - 421095630
"""

import numpy as np
import math
from numpy import linalg as LA

def f1(a,b,c):
  """
    Función uno de nuestro sistema
    
    Parameters
    ----------
    a float 
    b float
    c float

    Returns
    -------
    a*np.cos(b)-(2/3): float evaluación de la funcion
  """
  return a*np.cos(b)-(2/3)

def f2(a,b,c):
  """
    Función dos de nuestro sistema
    
    Parameters
    ----------
    a float 
    b float
    c float

    Returns
    -------
    np.cos(c)+(0.91*a*np.sin(b+c))-1.22: float evaluación de la funcion
  """
  return np.cos(c)+(0.91*a*np.sin(b+c))-1.22

def f3(a,b,c):
  """
    Función tres de nuestro sistema
    
    Parameters
    ----------
    a float 
    b float
    c float

    Returns
    -------
    0.76*a*np.cos(b+c)-np.sin(c): float evaluación de la funcion
  """
  return 0.76*a*np.cos(b+c)-np.sin(c)

def f_a(f,abc,h):
  """
    Derivada parcial respecto al primer parametro de la funcion
    
    Parameters
    ----------
    f function funcion a derivar
    abc array aproximacion
    h float valor para derivar 

    Returns
    -------
    (f(a+h,b,c)-f(a,b,c))/h: float 
  """
  a,b,c=abc
  return (f(a+h,b,c)-f(a,b,c))/h

def f_b(f,abc,h):
  """
    Derivada parcial respecto al segundo parametro de la funcion
    
    Parameters
    ----------
    f function funcion a derivar
    abc array aproximacion
    h float valor para derivar 

    Returns
    -------
    (f(a,b+h,c)-f(a,b,c))/h: float 
  """
  a,b,c=abc
  return (f(a,b+h,c)-f(a,b,c))/h

def f_c(f,abc,h):
  """
    Derivada parcial respecto al tercer parametro de la funcion
    
    Parameters
    ----------
    f function funcion a derivar
    abc array aproximacion
    h float valor para derivar 

    Returns
    -------
    (f(a,b,c+h)-f(a,b,c))/h: float 
  """
  a,b,c=abc
  return (f(a,b,c+h)-f(a,b,c))/h

def Jacobiana(f1,f2,f3,abc,h):
  """
    Obtiene la matriz jacobiana de tamaño 3x3
    
    Parameters
    ----------
    f1 function funcion 1
    f2 function funcion 2
    f3 function funcion 3
    abc array aproximacion
    h float valor para derivar 

    Returns
    -------
    jacob array matriz jacobiana
  """
  
  jacob = np.zeros([3,3])

  jacob[0][0]=f_a(f1,abc,h)
  jacob[1][0]=f_a(f2,abc,h)
  jacob[2][0]=f_a(f3,abc,h)

  jacob[0][1]=f_b(f1,abc,h)
  jacob[1][1]=f_b(f2,abc,h)
  jacob[2][1]=f_b(f3,abc,h)
  
  jacob[0][2]=f_c(f1,abc,h)
  jacob[1][2]=f_c(f2,abc,h)
  jacob[2][2]=f_c(f3,abc,h)

  return jacob

def Newton(aprox):
  """
    Obtiene los valores de la raíz de un sistema por
    Newton Generalizado
    
    Parameters
    ----------
    aprox array 

    Returns
    -------
    aprox array solucion de nuestro sistema 
  """

  h=0.001
  n=0
  while n<500:
    J= np.zeros([3,3])
    J= Jacobiana(f1,f2,f3,aprox,h);
    fx=np.array(aprox)
    fx[0]=f1(aprox[0],aprox[1],aprox[2])
    fx[1]=f2(aprox[0],aprox[1],aprox[2])
    fx[2]=f3(aprox[0],aprox[1],aprox[2])

    aprox=aprox-np.matmul(LA.inv(J),fx)

    n+=1

  return aprox

def main():
  #Aproximacion inicial (X=(1,0.1,0.1))
  ap = np.array([1.0,0.1,0.1])
  print('Aprox.inicial: ',ap)
  sol = Newton(ap)
  print('Aproximacion de la solucion')
  print(sol)
  print('Aproximacion evaluada en f1')
  print(f1(sol[0], sol[1],sol[2]))
  print('Aproximacion evaluada en f2')
  print(f2(sol[0], sol[1],sol[2]))
  print('Aproximacion evaluada en f3')
  print(f3(sol[0], sol[1],sol[2]))

  #Aproximacion inicial (X=(1.0,1.0,1.0))
  ap = np.array([1.0,1.0,1.0])
  print('Aprox.inicial: ',ap)
  sol = Newton(ap)
  print('Aproximacion de la solucion')
  print(sol)
  print('Aproximacion evaluada en f1')
  print(f1(sol[0], sol[1],sol[2]))
  print('Aproximacion evaluada en f2')
  print(f2(sol[0], sol[1],sol[2]))
  print('Aproximacion evaluada en f3')
  print(f3(sol[0], sol[1],sol[2]))

main()